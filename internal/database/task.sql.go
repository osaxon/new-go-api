// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task.sql

package database

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, user_id, due_date, status, description)
VALUES (?, ?, ?, ?, ?)
    RETURNING id, title, user_id, due_date, status, description
`

type CreateTaskParams struct {
	Title       string         `json:"title"`
	UserID      int64          `json:"user_id"`
	DueDate     sql.NullTime   `json:"due_date"`
	Status      string         `json:"status"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Title,
		arg.UserID,
		arg.DueDate,
		arg.Status,
		arg.Description,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.DueDate,
		&i.Status,
		&i.Description,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, title, user_id, due_date, status, description FROM tasks
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.DueDate,
		&i.Status,
		&i.Description,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, user_id, due_date, status, description FROM tasks
ORDER BY due_date
`

func (q *Queries) ListTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.UserID,
			&i.DueDate,
			&i.Status,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersTasks = `-- name: ListUsersTasks :many
SELECT id, title, user_id, due_date, status, description FROM tasks
WHERE user_id = ?
ORDER BY due_date
`

func (q *Queries) ListUsersTasks(ctx context.Context, userID int64) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listUsersTasks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.UserID,
			&i.DueDate,
			&i.Status,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
SET title = ?,
    user_id = ?,
    due_date = ?,
    status = ?,
    description = ?
WHERE id = ?
    RETURNING id, title, user_id, due_date, status, description
`

type UpdateTaskParams struct {
	Title       string         `json:"title"`
	UserID      int64          `json:"user_id"`
	DueDate     sql.NullTime   `json:"due_date"`
	Status      string         `json:"status"`
	Description sql.NullString `json:"description"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask,
		arg.Title,
		arg.UserID,
		arg.DueDate,
		arg.Status,
		arg.Description,
		arg.ID,
	)
	return err
}
