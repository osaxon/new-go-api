// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"
	database "new-go-api/internal/database"

	mock "github.com/stretchr/testify/mock"
)

// UserServiceMock is an autogenerated mock type for the UserService type
type UserServiceMock struct {
	mock.Mock
}

type UserServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *UserServiceMock) EXPECT() *UserServiceMock_Expecter {
	return &UserServiceMock_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *UserServiceMock) Login(ctx context.Context, email string, password string) (string, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserServiceMock_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type UserServiceMock_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *UserServiceMock_Expecter) Login(ctx interface{}, email interface{}, password interface{}) *UserServiceMock_Login_Call {
	return &UserServiceMock_Login_Call{Call: _e.mock.On("Login", ctx, email, password)}
}

func (_c *UserServiceMock_Login_Call) Run(run func(ctx context.Context, email string, password string)) *UserServiceMock_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserServiceMock_Login_Call) Return(_a0 string, _a1 error) *UserServiceMock_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserServiceMock_Login_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *UserServiceMock_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, user
func (_m *UserServiceMock) Register(ctx context.Context, user database.CreateUserParams) (database.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateUserParams) (database.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateUserParams) database.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.CreateUserParams) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserServiceMock_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type UserServiceMock_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - user database.CreateUserParams
func (_e *UserServiceMock_Expecter) Register(ctx interface{}, user interface{}) *UserServiceMock_Register_Call {
	return &UserServiceMock_Register_Call{Call: _e.mock.On("Register", ctx, user)}
}

func (_c *UserServiceMock_Register_Call) Run(run func(ctx context.Context, user database.CreateUserParams)) *UserServiceMock_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateUserParams))
	})
	return _c
}

func (_c *UserServiceMock_Register_Call) Return(_a0 database.User, _a1 error) *UserServiceMock_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserServiceMock_Register_Call) RunAndReturn(run func(context.Context, database.CreateUserParams) (database.User, error)) *UserServiceMock_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserServiceMock creates a new instance of UserServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceMock {
	mock := &UserServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
